name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  plan-and-apply-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Initialize Terraform
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve
      - name: Check Terraform Outputs (Debugging)
        run: |
          cd infrastructure
          echo "Private Endpoint IP: $(terraform output -raw private_endpoint_ip)"
          echo "SQL Connection String: $(terraform output -raw sql_connection_string)"
          echo "App Name: $(terraform output -raw app_name)"
          echo "Publish Profile: $(terraform output -raw publish_profile)"
      - name: Capture Terraform Outputs
        id: capture_outputs
        run: |
          cd infrastructure
          PRIVATE_ENDPOINT_IP=$(terraform output -raw private_endpoint_ip 2>/dev/null)
          SQL_CONNECTION_STRING=$(terraform output -raw sql_connection_string 2>/dev/null)
          APP_NAME=$(terraform output -raw app_name 2>/dev/null)
          PUBLISH_PROFILE=$(terraform output -raw publish_profile 2>/dev/null)
          echo "PRIVATE_ENDPOINT_IP=$PRIVATE_ENDPOINT_IP" >> $GITHUB_ENV
          echo "SQL_CONNECTION_STRING=$SQL_CONNECTION_STRING" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "PUBLISH_PROFILE=$PUBLISH_PROFILE" >> $GITHUB_ENV
      
      
      - name: Check GITHUB_ENV Contents Last Step
        run: cat $GITHUB_ENV
        
      - name: Debugging - Show environment variables
        run: |
          echo "APP_NAME=${{ env.APP_NAME }}"
          echo "PUBLISH_PROFILE=${{ env.PUBLISH_PROFILE }}"
          echo "PRIVATE_ENDPOINT_IP=${{ env.PRIVATE_ENDPOINT_IP }}"
          echo "SQL_CONNECTION_STRING=${{ env.SQL_CONNECTION_STRING }}"
        env:
          PRIVATE_ENDPOINT_IP: ${{ env.PRIVATE_ENDPOINT_IP }}
          SQL_CONNECTION_STRING: ${{ env.SQL_CONNECTION_STRING }}
          APP_NAME: ${{ env.APP_NAME }}
          PUBLISH_PROFILE: ${{ env.PUBLISH_PROFILE }}

  test:
    needs: plan-and-apply-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check GITHUB_ENV Contents Last Step
        run: cat $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/cloud-computing-project-trtaclb/my-flask-api:latest
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Azure Web App Deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.APP_NAME }}"          # Utilisation de la variable APP_NAME
          slot-name: "production"
          publish-profile: "${{ env.PUBLISH_PROFILE }}"  # Utilisation de la variable PUBLISH_PROFILE
          images: "ghcr.io/cloud-computing-project-trtaclb/my-flask-api:latest"
        env:
          APP_NAME: ${{ env.APP_NAME }}           # Définit explicitement les variables pour éviter les conflits
          PUBLISH_PROFILE: ${{ env.PUBLISH_PROFILE }}

        
