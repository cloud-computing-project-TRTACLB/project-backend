name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  plan-and-apply-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Initialize Terraform
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve
      - name: Check Terraform Outputs (Debugging)
        run: |
          cd infrastructure
          echo "Private Endpoint IP: $(terraform output -raw private_endpoint_ip)"
          echo "SQL Connection String: $(terraform output -raw sql_connection_string)"
          echo "App Name: $(terraform output -raw app_name)"
          echo "Publish Profile: $(terraform output -raw publish_profile)"
      - name: Capture Terraform Outputs
        id: capture_outputs
        run: |
          cd infrastructure
          echo "app_name=$(terraform output -raw app_name)" >> $GITHUB_ENV
          echo "publish_profile=$(terraform output -raw publish_profile)" >> $GITHUB_ENV
          echo "rg_name=$(terraform output -raw rg_name)" >> $GITHUB_ENV
          echo "sql_connection_string=$(terraform output -raw sql_connection_string)" >> $GITHUB_ENV


  test:
    needs: plan-and-apply-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debogging Terraform Outputs
        run: |
          echo "SQL Connection String: ${{ env.sql_connection_string}}"
          echo "App Name: ${{ env.app_name }}"
          echo "Publish Profile: ${{ env.publish_profile }}"
          echo "Resource Group Name: ${{ env.rg_name }}"

      - name: Run tests
        run: |
          pytest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_CONNECTION_STRING: ${{ env.sql_connection_string }}

  build-and-deploy:
    needs: [plan-and-apply-terraform, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check GITHUB_ENV Contents Last Step
        run: cat $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/cloud-computing-project-trtaclb/my-flask-api:latest
          build-args: |
            SQL_CONNECTION_STRING=${{ env.sql_connection_string }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
      
      - name: Azure Login  
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Configure Web App for Docker Image
        run: |
          az webapp config container set \
            --name "${{ env.app_name }}" \
            --resource-group "${{ env.rg_name }}" \
            --settings "SQL_CONNECTION_STRING=${{ env.sql_connection_string }}" \
            "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
            --docker-custom-image-name "ghcr.io/cloud-computing-project-trtaclb/my-flask-api:latest" \
            --docker-registry-server-url "https://ghcr.io" \
            --docker-registry-server-user "${{ github.actor }}" \
            --docker-registry-server-password "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Restart Azure Web App
        run: |
          az webapp restart \
            --name "${{ env.app_name }}" \
            --resource-group "${{ env.rg_name }}"
  

        
